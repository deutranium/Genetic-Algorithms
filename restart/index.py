from constants import *
from ga import *

# population = np.array([np.copy(OVERFIT_ERR) for i in range(NUM_POPULATION)])


# for idx in range(NUM_POPULATION):
#     prob = random.random()
#     if(prob <= 0.63): # 7/11
#         # print("FO")
#         gene_id = np.random.randint(NUM_GENES)
#         population[idx][gene_id] = 0

#     # print()
#     # print(population[idx])

#     population[idx] = mutate_child(population[idx])
#     # print(population[idx])



population = np.array([
[ 7.617517228255489e-10, -4.994054818864424e-13, -9.771225733271581e-13, 4.862879395856378e-11, -2.3403503067770084e-10, -1.710003179058606e-15, 9.359622923290425e-16, 1.0287155315482502e-05, -1.7756635933143241e-06, -1.2866872894466542e-08, 9.139191504569098e-10, ],
[ 1.4246719511100453e-08, -1.4579902200000002e-12, 4.3558764926629597e-13, 3.682878586415173e-11, -1.173076426886259e-10, -2.861196444840639e-15, 1.340068430528718e-15, 8.756080747489311e-06, -2.047377387822769e-06, -8.709620146871233e-09, 9.98214034e-10, ],
[ 3.871990838609719e-09, -1.6418746442929332e-12, -6.569802103929952e-11, 2.2954805641874336e-11, -2.625483255390138e-10, -2.3258055213031815e-15, 1.107203770486554e-15, 1.3269564041965774e-05, -2.2524206148353264e-06, -9.312613249094208e-09, 1.0183985029287346e-09, ],
[ 0.0, -1.45799022e-12, -3.3146012736474777e-13, 4.62010753e-11, -2.520170327502467e-10, -1.8366977e-15, 8.5294406e-16, 1.2889681458832238e-05, -2.04721003e-06, -1.3120430532428684e-08, 9.98214034e-10, ],
[ 1.1545033671253255e-08, -1.6184009307067586e-12, -3.1606739552798644e-11, 5.59835283879149e-11, -2.2293045176183976e-10, -1.7583591957363527e-15, 6.364922171167193e-16, 1.6083190252155923e-05, -2.465531227983224e-06, -1.05039129345849e-08, 1.1236318782283366e-09, ],
[ -9.653049801615194e-09, -5.085084080939686e-13, -5.193227542834144e-10, 2.2150208996551937e-11, -7.153939837526577e-11, -1.2818990188541566e-15, 3.857311573958039e-10, 7.746383356715923e-06, -2.1353914725327557e-06, -2.441545193116338e-09, 8.528722362329383e-10, ],
[ 2.016326668021201e-08, -1.0934967970001078e-12, -3.5672490792252834e-11, 6.762491230434844e-11, -1.6305939319732392e-10, -1.2416060339895295e-15, 1.1012490361913086e-15, 1.2106518130928528e-05, -2.2754569718979087e-06, -1.3242973878699356e-08, 1.145865192730693e-09, ],
[ 9.466560623375734e-09, -1.4487425861042743e-12, -4.248830704478935e-11, 3.033527635517917e-11, -2.8047589746109834e-10, -2.129696285694938e-15, 6.485640082212606e-16, 1.911682507970913e-05, -3.5850466925484995e-06, -5.575180664639156e-09, 1.491807484673436e-09, ],
[ 9.427471904910265e-12, -6.362385978496543e-13, -5.371693409689632e-13, 3.5476140848010214e-11, -2.609407902477393e-10, -1.4500357569326248e-15, 5.017528155760061e-16, 1.8613165295169597e-05, -2.2055303623417466e-06, -1.7214572145303077e-08, 1.0455045387962058e-09, ],
[ -8.857338155546692e-09, -5.078129263433435e-13, -4.797201123249927e-10, 1.011705366318591e-11, -3.067051530448128e-11, -1.0268246758851658e-15, 3.562605977586428e-10, 7.940503411030008e-06, -1.1171982025836137e-06, -9.835818345979923e-10, 3.172715323166025e-10, ],
[ -1.4497193893601646e-09, -2.462945884136115e-12, -4.2130943359536483e-13, 2.7944665506336127e-11, -3.864975201658564e-10, -1.7166914836175404e-15, 7.958840070626664e-16, 1.7123129494053364e-05, -6.626870087054799e-07, -1.3637097505635705e-08, 4.660642907003084e-10, ],
[ 1.4296311603889424e-08, -1.4550457241106614e-12, 3.7536475907418035e-13, 3.6477181782516137e-11, -1.1242418509814704e-10, -4.346835254529484e-15, 5.754948910442139e-16, 7.912664173105719e-06, -2.039701764056508e-06, -1.1752933328785284e-08, 9.959118664879119e-10, ],
[ 2.2701150794332676e-08, -2.2851323799080795e-12, -2.5604990608894757e-11, 5.552862360027885e-11, -1.0528555709352093e-10, -1.2073501477455282e-15, 1.8309972699947825e-15, 1.0520473036931992e-05, -2.1319680174847028e-06, -9.845346168322042e-09, 8.624896903897621e-10, ],
[ 1.511555440391922e-08, -1.6136464211286732e-12, -3.067975272672973e-11, 5.569358037447653e-11, -3.0443417775165735e-10, -2.5804307141491463e-15, 6.42907763532844e-16, 1.5988535923410298e-05, -2.9649985752126828e-06, -1.0581465474096543e-08, 1.5824185963201553e-09, ],
[ 6.548818776069311e-09, -9.76399465623316e-13, -3.219490788841434e-11, 5.336559874215065e-11, -3.693223446937061e-10, -1.7381155366172715e-15, 3.4362210946734427e-16, 1.0661950379079479e-05, -2.4732068517494847e-06, -1.7165494654564156e-08, 1.5374661638438406e-09, ],
[ -9.967288644492704e-09, -8.104302501147816e-13, -5.252234785534995e-10, 9.929900211538703e-12, -7.105449466490162e-11, -2.0397881416816833e-15, 3.907053139086441e-10, 7.709740849141371e-06, -2.9971111707487654e-06, -2.8873865975378726e-09, 9.995053236403704e-10, ],
[ 9.452196187287432e-09, -6.641004517474112e-13, -1.1678814596586385e-11, 3.9318276662493256e-11, -6.057553047453938e-10, -1.823081996672914e-15, 6.513520735584595e-17, 6.7841280441664755e-06, -2.596213317238411e-06, -5.371818288531108e-09, 8.344857401135138e-10, ],
[ 2.0280090989537078e-08, -1.8301453919945363e-12, 8.610604956539491e-13, 3.5730948507394e-11, -1.0152825370069832e-10, -3.610537983580103e-15, 1.3971284834660515e-15, 4.722455956823528e-06, -1.1524457863398273e-06, -8.19295317366421e-09, 9.982140339999997e-10, ],
[ -4.5935499436085294e-11, -2.2457132065649947e-13, -4.0579764531748866e-11, 4.660577716114877e-11, -2.216200396906061e-10, -1.6772951658328477e-15, 2.9471495599453453e-11, 1.327919685123515e-05, -1.8031475220515068e-06, -1.207035702745002e-08, 1.3894414644824653e-09, ],
[ 2.5185561217646837e-08, -3.5026413967929773e-12, -5.584042862576382e-11, 5.514995293111094e-11, -3.7988268757902994e-11, -2.218231727739454e-15, -4.4116572109665515e-12, 1.0624530826625593e-05, -3.2513174515396553e-06, -1.5070800308955743e-08, 9.847631454043876e-10, ],])

fitness = calculate_fitness(population)
#[......., val, train, fitness]
#(20,14)
count = 0


while(input() != "NO"):

    print("Generation: ", count)
    
    print("\n\n------------------------------\n")
    print("Generation " + str(count) + "\n")
    print("Initial Population: \n")
    
    print("\nThis:")

    for i in fitness:
        # write_file(i[:-3])
        # write_file(",".join(i))
        # print("[ ", end="")
        print("[ ", end="")
        for j in i[:-3]:
            print(j, end=", ")
        # f.write("]\n")
        print("]")
    print()

    print("\nFitness: \n")
    
    for i in fitness:
        # write_file(i[-3:])
        print(i[-3:])
        # for j in i[:-3]:
        #     print(j, end=", ")
    
    
    mating_pool = select_mating_pool(fitness)

    print("\nAfter Selection: \n")
    for i in mating_pool:
        print(i[:-3])

    offsprings = create_offsprings(mating_pool)


    new_gen = create_gen(np.array(offsprings), fitness)


    fitness = new_gen
    population = new_gen[:,:-3]

    print()
    count += 1
    # print(population.shape)

f.close()

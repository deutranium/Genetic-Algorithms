from constants import *
from ga import *

population = np.array([np.copy(OVERFIT_ERR) for i in range(NUM_POPULATION)])


for idx in range(NUM_POPULATION):
    prob = random.random()
    print(prob)
    if(prob <= 0.63): # 7/11
        # print("FO")
        gene_id = np.random.randint(NUM_GENES)
        population[idx][gene_id] = 0

    # print()
    # print(population[idx])

    population[idx] = mutate_child(population[idx])
    # print(population[idx])



# population = np.array([
#     [ -9.515762165362894e-12, -1.3666047714386924e-12, -9.314185166556642e-13, 1.5672134158466774e-11, -1.3486811396429811e-10, -7.158200087776161e-16, 2.1993744791709956e-15, 3.694310017536948e-05, -1.966342207649563e-06, -2.2932350480322247e-08, 9.474831270223363e-10, ],
# [ -5.864015246839436e-12, -1.4827701487220145e-12, -9.271773480522905e-13, 2.4469012502328917e-11, -1.821195035108238e-10, -2.1415923274155557e-16, 2.2366728452690532e-15, 4.061568863715431e-05, -1.9461776961267548e-06, -2.4949411800845848e-08, 9.47439282578939e-10, ],
# [ -7.300484220481244e-12, -1.7952213885032466e-12, -9.39124314579229e-13, 4.838640834070817e-11, -1.9656284090603908e-10, -1.8667091941495346e-15, 6.458642851690254e-16, 2.375126919454763e-05, -2.0704468320107075e-06, -1.618919098738522e-08, 9.952524204007377e-10, ],
# [ -4.0137802779337096e-12, -1.9678826689988275e-12, -2.9351715110542167e-12, 5.002345190998298e-11, -1.9526586249558527e-10, -1.8931006941002523e-15, 6.880774783934782e-16, 2.3961444313372776e-05, -2.0697167175936344e-06, -1.6428082084209315e-08, 9.960156945090987e-10, ],
# [ -1.953550511943115e-13, -1.9177364218549804e-12, -2.3740162938058275e-12, 5.128437491978375e-11, -1.876585374782868e-10, -1.898602311981076e-15, 7.746188786319677e-16, 2.4189893852724065e-05, -2.073286593444947e-06, -1.6477581823852854e-08, 9.959775699281096e-10, ],
# [ -1.0807077752808092e-11, -8.958178458246276e-13, -1.8679903101841013e-12, 5.010958963375869e-11, -1.8542387204589532e-10, -2.06067506494508e-15, 2.958014260468067e-16, 2.382309126553331e-05, -2.063698222736745e-06, -1.6316237742068143e-08, 9.965691146910837e-10, ],
# [ -7.082670409533908e-12, -1.4800184260374974e-12, -1.2786214052089591e-12, 4.1053477001718416e-11, -2.442571451503322e-10, -2.066223409193474e-15, 3.0577510241060057e-16, 2.4012147959353035e-05, -2.063360209836082e-06, -1.6420309012668668e-08, 9.9617959342345e-10, ],
# [ -1.8865902173892708e-12, -1.8880440854932332e-12, -2.6700424846473316e-12, 4.770117115672808e-11, -1.7654204896130243e-10, -1.9267029070337053e-15, 1.0002632033942303e-15, 2.3570125585366724e-05, -2.067204238230364e-06, -1.595871122694577e-08, 9.961653579838814e-10, ],
# [ 2.4964786989217606e-13, -1.9453292340254837e-12, -1.1419849880481643e-12, 4.169014384072883e-11, -1.8625145884796066e-10, -2.052973452916064e-15, 7.791589530630512e-16, 2.4217507442537214e-05, -2.0736287149344816e-06, -1.6555978619244154e-08, 9.959779797770498e-10, ],
# [ -1.317580557742876e-11, -7.192092009033314e-13, -1.86127221507054e-12, 4.4929623735704055e-11, -1.8135019004938327e-10, -2.480752294530396e-15, 1.5190664722425022e-16, 2.3770350122803916e-05, -2.061415084451451e-06, -1.6450846700937542e-08, 9.967612230983396e-10, ],
# [ -1.748816422663124e-11, -2.344851171471678e-12, -1.2819890398184509e-12, 5.833981766367666e-11, -2.3453040780113244e-10, -1.0787242809920659e-15, 6.332770259776608e-16, 2.2066769458969653e-05, -2.065320075554505e-06, -1.5388189452080472e-08, 9.945017198462801e-10, ],
# [ -2.5033955498469052e-11, -2.2063183748254097e-12, -6.236486185649668e-13, 5.438680983058338e-11, -2.495682053583393e-10, -8.516783229015607e-16, 9.695320517053441e-16, 3.659403750101419e-05, -2.0408651534914777e-06, -2.33463437628833e-08, 9.702566098756226e-10, ],
# [ -2.4779427205273483e-11, -1.0542974940864846e-12, -8.189050904083022e-13, 4.711234796493685e-11, -2.4826505392406633e-10, -2.6635061351125267e-15, 1.6811421745908973e-15, 2.2373331664641935e-05, -2.04705739110481e-06, -1.5062882525840753e-08, 9.56757812507728e-10, ],
# [ -3.671464650791965e-12, -1.64780079724646e-12, -1.8889305881972846e-12, 6.815661738430111e-11, -1.994387993973175e-10, -7.202560940006281e-16, 7.366087313826556e-16, 1.1118051023828196e-05, -2.0704223037968876e-06, -1.0597907159015998e-08, 9.959741386146357e-10, ],
# [ -2.6932161590178382e-11, -1.4303033680977501e-12, -2.5487000662347024e-13, 4.284471501902964e-11, -2.706730090101117e-10, -2.507312509920655e-15, 1.0674063389447286e-16, 2.3752956716953617e-05, -2.046406000144097e-06, -1.7582292449604137e-08, 9.856292492128816e-10, ],
# [ -3.641842101575984e-11, -1.1459791026104366e-12, -3.359233289252966e-13, 4.128599087272534e-11, -2.0423526764048153e-10, -2.212103657999433e-15, 4.400913777917991e-16, 2.1811920218404618e-05, -2.0430694586517473e-06, -1.529225842027649e-08, 9.346599219707572e-10, ],
# [ -2.2833600736582035e-11, -1.3578852871476627e-12, -4.1698357520264527e-13, 2.447017389968914e-11, -2.732463772359468e-10, -9.337388982880411e-16, 3.689951232954814e-16, 2.6422298245595506e-05, -2.047176527177454e-06, -1.5778141903070532e-08, 9.891147776776558e-10, ],
# [ -1.1761068595359084e-10, 1.807546505032197e-13, 3.0278293092510075e-12, 3.0637759720767415e-12, -3.2750438104082e-10, -1.3391096432459079e-15, -1.2782492197800336e-15, 1.7831128985135912e-05, -2.029845896456196e-06, -1.1836360817998926e-08, 9.841950508524159e-10, ],
# [ -9.779375513061375e-11, -2.9611348837791687e-12, -8.703499397835015e-13, 5.063223687696848e-11, -2.4319401012592785e-10, -2.1716354074614858e-15, -1.12320889196807e-15, 7.29179678163505e-06, -2.004510550371738e-06, -1.359798313474344e-08, 9.90744827567799e-10, ],
# [ -9.28094563936462e-12, -1.3427829433881987e-12, -9.121772449989552e-13, 3.038961215232753e-11, -1.9208671010071168e-10, -7.802541767840494e-16, 2.0988288654087665e-15, 3.236604298702069e-05, -1.9674489349234445e-06, -3.453593486094617e-08, 1.151122152988169e-09, ],
# [ -2.640369732047503e-11, -1.45917552524848e-12, -2.71107567410579e-13, 4.712470051373948e-11, -1.6538385800756624e-10, -2.3976831827543013e-15, 1.0967273267884715e-16, 2.49130148583929e-05, -2.0464617640912945e-06, -1.2117994307488972e-08, 9.950400995602612e-10, ],
# [ -4.532056945248989e-11, -2.9925189669138095e-13, 1.7683877614512178e-13, 5.2195929513927134e-11, -1.3088433070311233e-10, -4.868019368535937e-15, 1.7702114701133319e-15, 4.637810903097734e-05, -2.020258123609571e-06, -8.08291634232182e-09, 7.514866419609741e-10, ],
# [ -2.5721685788904568e-11, -5.230292668235016e-13, -1.3764719474009593e-12, 4.0330842628898634e-11, -1.7240808782260063e-10, -2.634234118636941e-15, 7.895724242326022e-16, 1.804902162801522e-05, -2.041567052902448e-06, -1.536503057604571e-08, 9.225091448875136e-10, ],
# [ 1.539538554472889e-11, -2.276906387124838e-12, -1.7907566309122787e-12, 5.047784388904191e-11, -2.046396166276257e-10, -1.0104541734358124e-15, 5.614625609839884e-16, 1.9950460876678045e-05, -2.0891473283559383e-06, -2.460621229821983e-08, 1.3149577250667335e-09, ],
# [ -1.0513755139180725e-10, -1.081990611197496e-13, 2.4918805187155934e-12, 8.481637561469867e-12, -3.191743954349346e-10, -7.174610671717524e-16, -1.4885472722193373e-15, 2.706801516591425e-05, -2.0313435414761462e-06, -1.2218071959592762e-08, 9.852671687144743e-10, ],
# [ -9.823049605363984e-11, -2.083803320877364e-13, 2.2145334364081174e-12, 1.3385186834062366e-11, -3.1132502115058796e-10, -1.3138325440258041e-15, -9.98564206519674e-16, 1.813770432218138e-05, -2.0339481297738244e-06, -1.8086635222030713e-08, 1.1990143671887481e-09, ],
# [ -6.13772166102922e-12, -1.8175361751823487e-12, -2.0396686824221603e-12, 4.964414756929755e-11, -1.903779375399058e-10, -1.9500319709873063e-15, 7.932071227777746e-16, 2.3799789074253055e-05, -2.0683294953071017e-06, -2.134183521210393e-08, 1.3234149516660125e-09, ],
# [ -3.1441370933660154e-11, -1.1037514258342575e-12, -8.745345248869308e-13, 5.266886938103088e-11, -1.574638950165526e-10, -2.1818989601186467e-15, 1.365690601905959e-15, 2.2919199057993398e-05, -2.036922888376465e-06, -1.216450578296424e-08, 1.3172643274181291e-09, ],
# [ -9.122550893091231e-12, -1.4635274327573113e-12, -2.1535695307895577e-12, 4.797062823046377e-11, -2.0818544657838428e-10, -2.129705894712399e-15, 1.1429572460865317e-15, 2.228198927392937e-05, -9.745967582273602e-07, -1.5786698231527242e-08, 9.845315282184272e-10, ],
# [ -6.178339150586532e-12, -1.3349253891377379e-12, -8.726837961556979e-13, 4.597783168436819e-11, -2.1832915404714715e-10, -2.2707133845291182e-15, 1.7359024143299735e-15, 2.6559078241379156e-05, -8.586675258634984e-07, -1.7390154097984872e-08, 9.421519546403156e-10, ]
# ])

fitness = calculate_fitness(population)
# [......., val, train, fitness]

# (20,14)
count = 0


while(input() != "NO"):

    print("Generation: ", count)
    
    f.write("\n\n------------------------------\n")
    f.write("Generation " + str(count) + "\n")
    f.write("Initial Population: \n")
    
    print("\nThis:")

    for i in fitness:
        print("[", end = " ")
        write_file(i)
        for j in i[:-3]:
            print(j, end=", ")
        print("],")

    print("\nFitness: ")
    
    for i in fitness:
        print("[", end = " ")
        for j in i[-3:]:
            print(j, end=", ")
        print("],")
    
    
    mating_pool = select_mating_pool(fitness)

    f.write("\nAfter Selection: \n")
    for i in mating_pool:
        write_file(i[:-3])

    offsprings = create_offsprings(mating_pool)


    new_gen = create_gen(np.array(offsprings), fitness)


    fitness = new_gen
    population = new_gen[:,:-3]

    print()
    count += 1
    # print(population.shape)


import client as C
from ga import *
import numpy as np

#### CONSTANTS ####
OVERFIT_ERR = [0.0, -1.45799022e-12, -2.28980078e-13,  4.62010753e-11, -1.75214813e-10, -
    1.83669770e-15,  8.52944060e-16,  2.29423303e-05, -2.04721003e-06, -1.59792834e-08,  9.98214034e-10]
NUM_GENES = 11

KEY = '81WmrH1dHrlpZ3Qj2RF4HRr9Qv8gRke6SmF2zNLjHJ3v6wzIYE'

NUM_CHROMOSOMES = 10
POPULATION_SIZE = (NUM_CHROMOSOMES, NUM_GENES)
MATING_POOL_SIZE = 8

# generate the population
# INITIAL_POPULATION = np.random.uniform(low = -0.00000000005, high = 0.00000000005, size = POPULATION_SIZE)

INITIAL_POPULATION = np.array([np.copy(OVERFIT_ERR) for i in range(NUM_CHROMOSOMES)])

INITIAL_POPULATION = np.array([[2.658841100804381e-11, -8.247548573983621e-13, -1.772584795848989e-13, 4.971548755602895e-11, -2.9200022046415934e-10, -2.2771693950265976e-15, 7.005079123629529e-16, 1.1448597128452835e-05, -5.781820562331938e-06, -3.985688401038829e-08, 5.668609634140998e-10, ],
[2.7639822953627834e-11, -9.406099739831472e-13, -1.43901136149798e-13, 4.482825856828415e-11, -2.62388157487445e-10, -1.06833873663627e-15, 3.780290109360405e-16, 9.069109639787935e-06, -6.239378605683909e-06, -3.7648471867033204e-08, 8.391034847437548e-10, ],
[3.174209277036852e-11, -8.497603129918037e-13, -1.2645376935927722e-13, 4.409049409414919e-11, -1.7508929263341318e-10, -1.5280423186505624e-15, 6.94815313699768e-16, 9.45310555125442e-06, -4.877898157497916e-06, -5.088208239963299e-08, 5.591036964015664e-10, ],
[3.363377398569806e-11, -9.490819098565637e-13, -1.669195044731921e-13, 4.2753967477583115e-11, -2.1114732399857616e-10, -2.1307081818081826e-15, 6.286613462042185e-16, 1.4829375133949284e-05, -5.347277865829395e-06, -4.542084686116776e-08, 7.453435877448621e-10, ],
[3.111192764519992e-11, -5.0735513601178e-13, -1.144140984155318e-13, 3.3870161182255927e-11, -1.3335549294044485e-10, -1.8677505718090666e-15, 8.151613960738718e-16, 1.250696446128663e-05, -4.523814071688222e-06, -5.483292331550394e-08, 7.219489150842255e-10, ],
[2.899411893361609e-11, -6.13482271708965e-13, -1.0327916971193438e-13, 3.417391745966279e-11, -1.7775589483917632e-10, -1.6772941269343326e-15, 7.214796020297465e-16, 1.512697285567631e-05, -6.148165584803611e-06, -3.3689902688499046e-08, 9.797443995626617e-10, ],
[2.3577965336546596e-11, -8.016844945758842e-13, -1.4069053902308865e-13, 3.801368404927277e-11, -2.352781313460682e-10, -2.07820706415605e-15, 6.916797730821436e-16, 1.0267428085966688e-05, -4.208528415513639e-06, -4.70357001124552e-08, 6.196755452295294e-10, ],
[2.001613752310799e-11, -7.669383326683878e-13, -1.224511178852274e-13, 4.724001848932037e-11, -2.874887156538097e-10, -1.0047325668281037e-15, 4.532603473849939e-16, 1.101752035758671e-05, -5.356287587263367e-06, -3.632932951689996e-08, 9.68911304634539e-10, ],
[2.2114757665345183e-11, -7.999066092398909e-13, -1.9751580690951683e-13, 5.594211523384829e-11, -2.3291812165371686e-10, -9.60282911994628e-16, 3.298705352647908e-16, 8.592557181621215e-06, -6.1986005422168225e-06, -4.481481741351394e-08, 8.322743128038901e-10, ],
[2.8341751383351596e-11, -1.0931484683325817e-12, -1.29022502038652e-13, 4.1658059371087174e-11, -2.428379540005902e-10, -1.375437863550363e-15, 7.984758758681415e-16, 8.968571840988484e-06, -4.406829244820727e-06, -5.402046432469073e-08, 4.212943462208712e-10, ]])

# INITIAL_POPULATION = [OVERFIT_ERR]*NUM_CHROMOSOMES

NUM_GENERATIONS= 10

population= INITIAL_POPULATION

print(population.shape)

count = 0
while(input() != "NO"):
# for gen in range(NUM_GENERATIONS):
    print("Generation: " + str(count))

    fitness= get_fitness(population)

    print("Fitness: ", fitness)

    parents= mating_pool(population, fitness)

    offsprings_crossover= crossover(parents, offspring_size = (NUM_CHROMOSOMES - MATING_POOL_SIZE, NUM_GENES))

    # for kid in offsprings_crossover:
      # kid = mutate_vector(kid)
      # population.append(kid)
    offsprings= mutate_vector(offsprings_crossover)

    population[0: parents.shape[0], : ] = parents[: , : 11]
    population[MATING_POOL_SIZE:, : ] = offsprings

    print("This: ")
    for i in population:
        print("[", end="")
        for j in i:
            print(j, end=", ")
        print("],")
    print("dim: ", population.shape)
    count += 1

print(population)
